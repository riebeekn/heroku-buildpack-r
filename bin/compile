#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

shopt -s extglob

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR="$2/vendor"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"

###################################################
# >>> CONFIGURABLE SETTINGS, change as appropriate
###################################################
BUILD_PACK_VERSION="20140627-1902"

GCC_VERSION="4.3"
GLIBC_VERSION="2.7"
R_VERSION="3.1.0"

S3_BUCKET="r-buildpack"
###################################################
# <<< END CONFIGURABLE SETTINGS
###################################################

R_BINARIES="https://s3.amazonaws.com/${S3_BUCKET}/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"
# R_BINARIES="https://s3.amazonaws.com/r-buildpack/R-3.1.0-binaries-20140625-1902.tar.gz"
echo "THE Binaries URL: $R_BINARIES"

VENDOR_DIR="$BUILD_DIR/vendor"
R_BASE="$VENDOR_DIR/R"
CRAN_MIRROR="http://cran.revolutionanalytics.com"

mkdir -p $CACHE_DIR

# vendor R into the slug
echo "Vendoring R $R_VERSION" | indent

# download and unpack binaries
echo "Downloading and unpacking R binaries" | indent
mkdir -p $VENDOR_DIR && curl $R_BINARIES -s -o - | tar xzf - -C $VENDOR_DIR

# need to copy the binaries to /app/vendor so that R works
cp -R $VENDOR_DIR/gcc-$GCC_VERSION /app/vendor/gcc-$GCC_VERSION
cp -R $VENDOR_DIR/glibc-$GLIBC_VERSION /app/vendor/glibc-$GLIBC_VERSION
cp -R $VENDOR_DIR/R /app/vendor/R


# R needs to know where gfortran and glibc header files are
export PATH=/app/vendor/R/bin:/app/vendor/gcc-$GCC_VERSION/bin:$PATH
export LDFLAGS="-L/app/vendor/gcc-$GCC_VERSION/lib64/"
export CPPFLAGS="-I/app/vendor/glibc-$GLIBC_VERSION/string/ -I/app/vendor/glibc-$GLIBC_VERSION/time"
export R_HOME=$R_BASE/lib64/R
export R_INCLUDE=$R_HOME/include

# copy over environment
mkdir -p $BUILD_DIR/.profile.d
cp "$BUILDPACK_DIR/bin/r_environment.sh" $BUILD_DIR/.profile.d/r_environment.sh

# prevent warnings
mkdir -p /app/vendor/R/lib64/R/doc/html
touch /app/vendor/R/lib64/R/doc/html/R.css

# install dependencies from CRAN
echo "Executing init.r script" | indent

# set the CRAN mirror and run the init.r program
/app/vendor/R/bin/R -s <<RPROG > indent
  Sys.setenv(BUILD_DIR="$BUILD_DIR")
  setwd("$BUILD_DIR")
  r <- getOption("repos");
  r["CRAN"] <- "$CRAN_MIRROR";
  options(repos=r);
  `cat $BUILD_DIR/init.r`
RPROG

echo "R $R_VERSION successfully installed" | indent

# need to copy binaries back so that any installed packages are included in the slug
rm -rf $VENDOR_DIR && mkdir -p $VENDOR_DIR

mkdir -p $VENDOR_DIR/gcc-$GCC_VERSION
cp -R /app/vendor/gcc-$GCC_VERSION $VENDOR_DIR/gcc-$GCC_VERSION

mkdir -p $VENDOR_DIR/glibc-$GLIBC_VERSION
cp -R /app/vendor/glibc-$GLIBC_VERSION $VENDOR_DIR/glibc-$GLIBC_VERSION

mkdir -p $VENDOR_DIR/R
cp -R /app/vendor/R/* $VENDOR_DIR/R

# HACK
mkdir -p $VENDOR_DIR/R/lib64/R/lib
cp /app/vendor/gcc-$GCC_VERSION/lib64/* $VENDOR_DIR/R/lib64/R/lib

# remove unneeded files to make slug smaller
# pushd $VENDOR_DIR/gcc-$GCC_VERSION > /dev/null && rm -rf !(lib64) && popd > /dev/null
# pushd $VENDOR_DIR/glibc-$GLIBC_VERSION > /dev/null && rm -rf !(string|time) && popd > /dev/null
