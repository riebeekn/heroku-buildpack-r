#!/bin/bash

# NOTE: Heroku Cedar Stack
#  gcc needs to be 4.3

# See http://cran.r-project.org/doc/manuals/R-admin.html for details on building R

# fail fast
set -e

# debug
# set -x

## HELPERS

function download() {
  if [ ! -f "$sourcesdir/$2" ]; then 
    echo Downloading $2...
    curl $1 -o $sourcesdir/$2 -s -S
  else # otherwise already have it
    echo Already downloaded $2...
  fi
}

function unpack() {
  if [ ! -d "$vendordir/$2" ]; then
    echo Unpacking $2...
    tar $1 $sourcesdir/$2.tar.gz -C $vendordir
  else
    echo Already unpacked $2...
  fi
}

function build() {
  echo ----------------------------------------------------------------------
  echo Building $@...
  echo ----------------------------------------------------------------------
  echo
  pushd $vendordir/$1
    prefix=${2:-$vendordir}
    ./configure --prefix=$prefix && make && make install && make clean
  popd > /dev/null
  echo
  echo ----------------------------------------------------------------------
  echo Finished Building $@...
  echo ----------------------------------------------------------------------
  echo

  # add to libraries and pkg-config
  export LD_LIBRARY_PATH="$vendordir/$2:$LD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$vendordir/$2/lib/pkgconfig:$PKG_CONFIG_PATH"
}

## SCRIPT
source build-r.config
build_no="${2:-`date +%Y%m%d-%H%M`}"

echo ======================================================================
echo
echo Starting build...
echo
echo R Version = $r_version
echo Build No. = $build_no
echo
echo ======================================================================

basedir="$( cd -P "$( dirname "$0" )" && pwd )"

# create output directory
vendordir=/app/vendor
mkdir -p $vendordir
sourcesdir=/vagrant/sources
mkdir -p $sourcesdir
outputdir=/vagrant/output
mkdir -p $outputdir

echo ======================================================================
echo Downloading and unpacking dependancies...
echo ======================================================================

# http://www.freedesktop.org/wiki/Software/pkg-config/
download $pkgconfig_url pkg-config-$pkgconfig_version.tar.gz
unpack xzf pkg-config-$pkgconfig_version

# NOT USED in old version of the build pack and seems to work
# fine without it, so skipping this
# http://www.freetype.org/freetype2/ 
# download $freetype_url freetype-$freetype_version.tar.gz
# unpack xzf freetype-$freetype_version

# NOT USED in old version of the build pack and seems to work
# fine without it, so skipping this
# http://directfb.org/ 
# download $directfb_url DirectFB-$directfb_version.tar.gz
# unpack xzf DirectFB-$directfb_version

# http://www.libpng.org/pub/png/libpng.html
download $libpng_url libpng-$libpng_version.tar.gz
unpack xJf libpng-$libpng_version

# http://www.cairographics.org
download $pixman_url pixman-$pixman_version.tar.gz
unpack xzf pixman-$pixman_version

# NOT USED in old version of the build pack and seems to work
# fine without it, so skipping this
# http://www.freedesktop.org/software/fontconfig
# download $fontconfig_url fontconfig-$fontconfig_version.tar.gz
# unpack xzf fontconfig-$fontconfig_version

# http://www.cairographics.org
download $cairo_url cairo-$cairo_version.tar.gz
unpack xzf cairo-$cairo_version

# http://gcc.gnu.org/wiki/GFortran
download $gcc_url gcc-$gcc_version.tar.gz
unpack xJf gcc-$gcc_version

# patch gcc features.h file
# see http://permalink.gmane.org/gmane.comp.gcc.help/40166
mkdir -p $vendordir/gcc-$gcc_version/lib/gcc/x86_64-unknown-linux-gnu/$gcc_ver/include-fixed
cp $basedir/features.h $vendordir/gcc-$gcc_version/lib/gcc/x86_64-unknown-linux-gnu/$gcc_ver/include-fixed/features.h
export LD_LIBRARY_PATH="$vendordir/gcc-$gcc_version:$LD_LIBRARY_PATH"

# https://www.gnu.org/software/libc/
download $glibc_url glibc-$glibc_version.tar.gz
unpack xzf glibc-$glibc_version

# patch gcc features.h file
# See http://permalink.gmane.org/gmane.comp.gcc.help/40166
cp $basedir/features.h $vendordir/gcc-4.3/lib/gcc/x86_64-unknown-linux-gnu/4.3.6/include-fixed/features.h

echo ============================================================
echo Building dependencies...
echo ============================================================

# pkgconfig
build pkg-config-$pkgconfig_version
export PKG_CONFIG=$vendordir/bin/pkg-config
export PKG_CONFIG_PATH=$vendordir/lib/pkgconfig

build libpng-$libpng_version
build pixman-$pixman_version
build cairo-$cairo_version

echo ============================================================
echo Downloading R
echo ============================================================

download $r_url R-$r_version.tar.gz
unpack xzf R-$r_version

echo ============================================================
echo Building R
echo ============================================================

# R needs to know where gfortran and glibc header files are
export PATH=$vendordir/gcc-4.3/bin:$PATH
export LDFLAGS="-L$vendordir/gcc-4.3/lib64/"
export CPPFLAGS="-I$vendordir/glibc-2.7/string/ -I$vendordir/glibc-2.7/time"

echo GCC Version: 4.3
echo PATH: $PATH
echo LDFLAGS: $LDFLAGS
echo CPPFLAGS: $CPPFLAGS

# configure and make R
build R-$r_version $vendordir/R
cp $vendordir/lib/*.* $vendordir/R/lib64/R/lib/

echo ============================================================
echo Removing uneeded files to make output smaller
echo ============================================================
# TODO: might be more files that can be removed to make build smaller still

pushd $vendordir

# gcc
rm glibc-$glibc_version/BUGS
rm glibc-$glibc_version/CANCEL*
rm glibc-$glibc_version/ChangeLog*
rm glibc-$glibc_version/CONFORMANCE
rm glibc-$glibc_version/COPYING*
rm glibc-$glibc_version/NAMESPACE
rm glibc-$glibc_version/NEWS
rm glibc-$glibc_version/NOTES
rm glibc-$glibc_version/PROJECTS
rm glibc-$glibc_version/README*
rm glibc-$glibc_version/Rules
rm glibc-$glibc_version/WUR-REPORT
rm -rf glibc-$glibc_version/man

rm -rf gcc-$gcc_version/info
rm -rf gcc-$gcc_version/man

rm -rf R/lib64/R/doc
rm R/lib64/R/COPYING*
rm R/lib64/R/SVN-REVISION
popd

echo ============================================================
echo Compressing and copying to shared directory: /vagrant/
echo ============================================================

# compress
pushd $vendordir
tar czf "R-$r_version-binaries-$build_no.tar.gz" gcc-$gcc_version glibc-$glibc_version R
cp R-$r_version-binaries-$build_no.tar.gz $outputdir
popd
